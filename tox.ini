[tox]
envlist = py36,flake8,pylint,doc8,packaging,docs
minversion = 2.7.0

## Configure linters

[flake8]
count = True
show-source = True
doctests = True
# select = E, F, W, C90, I, D, B, B902
ignore =
    # blank-line after doc summaries (annoying for modules' doc)
    D205
    # conflicts with D211: No blank lines allowed before class docstring
    D203
    # do not enforce first-line-period at module docs
    D400
    # conflicts with E133: closing bracket is missing indentation
    E123
exclude =
    .tox,
    .git,
    __pycache__,
    docs,
    config,
    build,
    dist,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs,
max-line-length = 100
# McCabe complexity checker
max-complexity = 20
# flake8-import-order: style
import-order-style = google
# flake8-import-order: local module name checker
application-import-names = repro

[testenv:flake8]
description = Use flake8 linter to impose standards on the project
basepython = python3.6
skip_install = true
deps =
    flake8 == 3.5.0
    flake8-import-order == 0.15
    flake8-docstrings == 1.1.0
    flake8-bugbear == 17.4.0
commands =
    flake8 docs/ src/repro/ tests/ setup.py

[testenv:pylint]
description = Perform static analysis and output code metrics
basepython = python3.6
skip_install = false
deps =
    pylint >= 2.1.1
    astroid >= 2.0.4
commands =
    pylint src/repro

[testenv]
description = Run tests with coverage with pytest under current Python env
setenv = COVERAGE_FILE=.coverage.{envname}
passenv = GITLAB_CI CI_BUILD_REF_NAME CI_BUILD_ID CI_BUILD_REPO CI_BUILD_REF
deps =
    -rtests/requirements.txt
    coverage
usedevelop = True
commands =
    coverage run --parallel-mode setup.py test
    coverage combine
    coverage report -m

[testenv:final-coverage]
description = Combine coverage data across environments (run after tests)
skip_install = True
setenv = COVERAGE_FILE=.coverage
passenv = {[testenv]passenv}
deps = coverage
commands =
    coverage erase
    coverage combine
    coverage report -m
    coverage xml

[testenv:codecov]
description = Upload coverage data to codecov (only run on CI)
setenv =
    {[testenv:final-coverage]setenv}
passenv = {[testenv]passenv}
deps = codecov
commands = codecov --required
